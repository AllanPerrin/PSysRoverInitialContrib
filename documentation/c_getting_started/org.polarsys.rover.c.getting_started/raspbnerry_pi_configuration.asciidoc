== First contact with the Raspberry Pi

With these steps, you prepare your Raspberry Pi 3 to make it ready to be the core of your Rover.

You need:

* A raspberry pi 3
* A micro-SD card

For the duration of the installation:

* An USB keyboard 
* A screen and an HDMI cable
* An Ethernet cable

=== Install Raspbianfootnote:[Alternatively install the PolarSys Rover OS]
The https://www.raspberrypi.org[Raspberry Pi foundation] provides pre-packaged versions of Raspbian through their https://www.raspberrypi.org/downloads/[NOOBS installer]. 

Installation steps:

* Download NOOBS and extract it to a directory on your computer
* Insert a micro-SD card in your laptop SD card driver and format it as FAT32. You'll certainly need the SD card adaptor that usually comes with your Micro-SD card. 
* Copy the content of your NOOBS folder to the SD card
* Insert the micro-SD card in your Raspberry and plug the power. Note that in this initial section, you certainly need a keyboard and a screen to proceed to the installation.

You don't need to setup the wifi connection during installation as you will certainly connect your Raspberry Pi through and Ethernet cable.

==== Network
Enable SSH:

* login to your Raspberry Pi
** user: pi
** password: raspberry

....
>sudo raspi-config
# Then enable ssh in >Advanced Options>SSH
....

Get the IP address of your Raspberry pi by running `ifconfig`

....
>sudo shutdown
....

Then log onto your raspberry pi through ssh: 
....
>ssh pi@192.168.2.5 # in my case
....

==== Keep your Rpi up to date
....
>sudo apt-get update
>sudo apt-get upgrade
....

Then take a coffee while all updates are being downloaded.

== Network connections
=== Ethernet connection
Except during installation phases, you don't need to use the ethernet connection between your Raspberry Pi and your laptop.

=== Setup Raspberry Pi as a wifi access pointfootnote:[Inspired from this https://frillip.com/using-your-raspberry-pi-3-as-a-wifi-access-point-with-hostapd/[tuto] about how to setup the Raspberry Pi 3 as a wifi access point.]

Install hostapd (to manage the access point) and dnsmasq (to offer dhcp
to clients)

....
> sudo apt-get install hostapd dnsmasq
....


Update dhcpd config to ignore wlan0

....
> sudo nano /etc/dhcpcd.conf
....

and add the following line to the bottom of the file:

....
denyinterfaces wlan0  
....

Configure your wifi static IP address

....
> sudo nano /etc/network/interfaces 
....

and edit the wlan0 section

....
allow-hotplug wlan0  
iface wlan0 inet static  
    address 192.168.168.1
    netmask 255.255.255.0
    network 192.168.168.0
    broadcast 192.168.168.255
....

Restart dhcpd and wlan0

....
> sudo service dhcpcd restart
> sudo ifdown wlan0
> sudo ifup wlan0
    
....

Configure HostAPD

....
> sudo nano /etc/hostapd/hostapd.conf
....

with the following content (see the
https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf[hotsapd.conf
documentation] for more information):

....
# This is the name of the WiFi interface we configured above
interface=wlan0

# Use the nl80211 driver with the brcmfmac driver
driver=nl80211

# This is the name of the network
ssid=PolarSysRover_AddYouInitialsHere

# Use the 2.4GHz band
hw_mode=g

# Use channel 6
channel=6

# Enable 802.11n
ieee80211n=1

# Enable WMM
wmm_enabled=1

# Enable 40MHz channels with 20ns guard interval
ht_capab=[HT40][SHORT-GI-20][DSSS_CCK-40]

# Accept all MAC addresses
macaddr_acl=0

# Use WPA authentication
auth_algs=1

# Require clients to know the network name
ignore_broadcast_ssid=0

# Use WPA2
wpa=2

# Use a pre-shared key
wpa_key_mgmt=WPA-PSK

# The network passphrase
wpa_passphrase=polarsys

# Use AES, instead of TKIP
rsn_pairwise=CCMP
....

This configuration creates an access point called *PolarSysRover_AddYouInitialsHere* with a connection password *polarsys*

Test the configuration with

....
> sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf
....

You can check from your computer that the SSID is broadcasted. Hit
Ctrl+C to stop the process.

Make sure that the hostapd script knows where his config file is
located:

....
> sudo nano /etc/default/hostapd
....

Edit the line stating with #DAEMON_CONF="" to say

....
DAEMON_CONF="/etc/hostapd/hostapd.conf"
....

Now, let configure the DHCP server. Save the original config file and
create a new one

....
sudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.orig  
sudo nano /etc/dnsmasq.conf  
....

Paste the following config in the new file:

....
# Use interface wlan0
interface=wlan0

# Explicitly specify the address to listen on
listen-address=192.168.168.1

# Bind to the interface to make sure we aren't sending things elsewhere
bind-interfaces

# Forward DNS requests to Google DNS
server=8.8.8.8

# Don't forward short names
domain-needed

# Never forward addresses in the non-routed address spaces.
bogus-priv

# Assign IP addresses between 192.168.168.2 and 192.168.168.40 with a 12 hour lease time
dhcp-range=192.168.168.1,192.168.168.40,12h
....

Now, let's start the services

....
> sudo service hostapd start  
> sudo service dnsmasq start  
....

== Install Wiring Pi

You should start by installing the WiringPi library because we will need
it for the Rover, and it makes it easy to perform some initial tests.

Read the http://wiringpi.com/download-and-install/[install wriringPi]
documentation on the Wiring Pi website.

On the Raspberry Pi, type

....
> git clone git://git.drogon.net/wiringPi
> cd wiringPi
> ./build
....

Check install wit the command

....
> gpio readall
....

== The Raspberry Pi Hello World

In this section, we set a LED on thanks to Wiring Pi We will use the LED
later with the project

Connect a led and test it. (see the config part of the
http://iot.eclipse.org/java/tutorial/[greenhouse tutorial])

With a Grove LED and a pin Female Jumper to Grove 4 pin Conversion
Cable, connect: 
* BLACK wire goes on PIN#14 
* RED wire goes on PIN#02 
* YELLOW wire goes on PIN#11 
* The WHITE wire is not used in the case of the LED – you only really need one pin to toggle a LED on or off, right? :-) – so you can leave it dangling or connect it to a Ground pin header.

....
> ssh pi@192.168.2.3
> gpio mode 0 out 
# gpio #0 corresponds to pin #11
> gpio write 0 1
# Your led should be on
> gpio write 0 0
# Your led should be off
....
